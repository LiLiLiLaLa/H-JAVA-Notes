1.异常的分类
程序的异常Throwable:
A.严重问题：Error，不处理，一般都是很严重的问题，比如内存溢出
B.一般问题Exception
a.编译期问题：不是RuntimeException的异常，必须进行处理，若不处理编译无法通过
b.运行期问题：RuntimeException及其子类，不处理，是由于代码不够严谨，需要修正代码

2.如果程序出现了问题，而我们没做任何处理，最终JVM会做出默认处理，把异常的名称，原因及出现问题等信息输出在控制台。同时会结束程序，程序不会继续往下执行。硅干扰后续无关程序的进行，因此必须进行异常处理。

3.编译期异常和运行期异常的区别
编译期异常：Java程序必须显示处理，否则程序就会出现错误，无法通过编译
运行期异常：无需显示处理，也可以和编译时异常一样处理

4.异常处理方案
A.try...catch...finally
注：a.try里面的代码越少越好，更多的话要耗费更多的资源来处理
b.catch里面必须有内容，哪怕给出一个简单的提示，如果直接空白实际是在隐藏问题
c.一旦try里面除了问题，就会在这里把问题给抛出去，然后和catch里面的问题进行匹配，一旦有匹配的，就执行catch里面的处理，然后结束了try...catch...，然后继续后面的代码
d.catch后面括号中能明确的异常尽量明确，不要用Exception，提高效率
e.多个异常时，catch中的平级关系异常谁前谁后无所谓，如果出现长幼顺序，必须等级小的在前，大的在后

//A方案处理格式
try{
    可能出现问题的代码
}catch（异常名变量）{
    针对问题的处理
}finally{
    释放资源
}

//变形格式
try{
    可能出现问题的代码
}catch（异常名变量）{
    针对问题的处理
}

//多个异常
A.每一个异常写一个try...catch...
B.写一个try，多个catch
try{
   ...
}catch(异常变量名){
   ...
}
...

//JDK7中新的异常处理方案,该方式虽然简洁但是有两个缺点
//处理方式是一种（实际开发中，可以针对同类型多个异常给出同一个解决方式）
//多个异常间必须是平级关系，出现高低等级时，不论高等级写在前还是在后都会出现问题
try{
   ...
}catch(异常名1 | 异常名2 | ... 变量){
   ...
}

B.throws 抛出






数据结构
数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、树
算法：递归、排序、二分查找、搜索、哈希、贪心、 分治、回溯、动归、字符串匹配

1.数据结构：是计算机存储或组织数据的集合。比如数组。
a.逻辑数据结构：指反映元素之间逻辑关系的数据结构，其逻辑关系是指数据元素之间的前后关系，而与他们在计算机中的存储位置无关，比如集合、线性结构、树形结构、图形结构

b.物理数据结构：逻辑数据在计算机中真正的存储形式
顺序存储：数据元素放在连续的空间中，数据的逻辑关系与物理关系一致。比如数组
优点：方便进行随机元素的查找
缺点：数组的插入与删除操作十分耗时，需要频繁进行数组元素的移动，可能造成空间浪费

不连续存储：元素存储在随机单元中，可以是连续的也可以是不连续的。比如链表
优点：方便进行元素的插入与删除，但是不会造成空间浪费
缺点：查找缓慢，要从前向后遍历

2.算法：在特定的数据结构上一组输入按照特定的方式输出。比如排序。

3.如何判断一个算法的优缺点：以空间换时间
a.时间上
b.空间上 
